package pt.ipb.nmsfs;

import java.io.File;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.HashMap;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import pt.ipb.marser.MibOps;
import pt.ipb.nmsfs.mibfs.MibDirFS;
import fuse.Errno;
import fuse.Filesystem3;
import fuse.FuseDirFiller;
import fuse.FuseException;
import fuse.FuseFtypeConstants;
import fuse.FuseGetattrSetter;
import fuse.FuseMount;
import fuse.FuseOpenSetter;
import fuse.FuseStatfsSetter;

public class SnmpFS extends AbstractFS {
	private static final Log log = LogFactory.getLog(SnmpFS.class);

	public static final String PREFSDIR = System.getProperty("user.home") + File.separator + ".nmsfs";

	public static final String ROOTDIR = "/";

	public static final String CURRENTDIR = ".";

	public static final String PREVIOUSDIR = "..";

	public static final String MIBDIR = "MIBs";

	public static final String AGENTDIR = "Agent";

	HashMap<String, Filesystem3> fsMap = new HashMap<String, Filesystem3>();

	public SnmpFS() {
		log.debug("Starting backend");

		createPrefsDir();

		MibOps mibOps = new MibOps();
		fsMap.put(MIBDIR, new MibDirFS(mibOps));
		fsMap.put(AGENTDIR, new AgentFS(mibOps));

		log.debug("done");

	}

	private void createPrefsDir() {
		File f = new File(PREFSDIR);
		f.mkdirs();
	}

	public int getattr(String path, FuseGetattrSetter getattrSetter) throws FuseException {
		log.debug("getattr: "+path);

		int nlink = 1;
		int uid = 0;
		int gid = 0;
		int time = (int) (System.currentTimeMillis() / 1000L);
		int size = 0;
		int blocks = (int) (size * NAME_LENGTH + BLOCK_SIZE - 1) / BLOCK_SIZE;

		if (path.equals(ROOTDIR) || path.equals(CURRENTDIR) || path.equals(PREVIOUSDIR)) {
			getattrSetter.set(path.hashCode(), FuseFtypeConstants.TYPE_DIR | 0777, nlink, uid, gid, 0, size, blocks,
					time, time, time);

		} else {

			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);

			if (fs == null) {
				throw new FuseException("NotFound").initErrno(FuseException.ENOENT);
			}
			return fs.getattr(newPath, getattrSetter);
		}
		return 0;
	}

	public int getdir(String path, FuseDirFiller filler) throws FuseException {
		log.debug("getdir: "+path);

		filler.add(CURRENTDIR, CURRENTDIR.hashCode(), FuseFtypeConstants.TYPE_DIR | 0777);
		filler.add(PREVIOUSDIR, PREVIOUSDIR.hashCode(), FuseFtypeConstants.TYPE_DIR | 0777);
		if (path.equals(ROOTDIR)) {
			for (String name : fsMap.keySet()) {
				filler.add(name, name.hashCode(), FuseFtypeConstants.TYPE_DIR | 0777);
			}
			return 0;
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.getdir(newPath, filler);
		}

	}

	public int mknod(String path, int mode, int rdev) throws FuseException {
		log.debug("mknod: "+path + " " + mode + " " + rdev);
		if (path.equals(ROOTDIR)) {
			throw new FuseException("Read Only").initErrno(FuseException.EACCES);
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.mknod(newPath, mode, rdev);
		}

	}

	public int open(String path, int flags, FuseOpenSetter openSetter) throws FuseException {
//		flags -= 32768;
		log.debug("open: "+path + "; flags: " + flags);

		if (path.equals(ROOTDIR)) {
			throw new FuseException("Read Only").initErrno(FuseException.EACCES);
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.open(newPath, flags, openSetter);
		}
	}

	public int read(String path, Object fh, ByteBuffer buf, long offset) throws FuseException {
		log.debug("read: "+path + " " + offset);

		if (path.equals(ROOTDIR)) {
			throw new FuseException("Read Only").initErrno(FuseException.EACCES);
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.read(newPath, fh, buf, offset);
		}
	}

	public int write(String path, Object fh, boolean isWritepage, ByteBuffer buf, long offset) throws FuseException {
		log.debug("write: "+path + " " + offset);
		if (path.equals(ROOTDIR)) {
			throw new FuseException("Read Only").initErrno(FuseException.EACCES);
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.write(newPath, fh, isWritepage, buf, offset);
		}

	}

	public int flush(String path, Object fh) throws FuseException {
		log.debug("flush: "+path);
		if (path.equals(ROOTDIR)) {
			throw new FuseException("Read Only").initErrno(FuseException.EACCES);
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.flush(newPath, fh);
		}

	}

	public int fsync(String path, Object fh, boolean isDatasync) throws FuseException {
		// if (fh instanceof FH)
		return 0;

		// return Errno.EBADF;
	}

	public int release(String path, Object fh, int flags) throws FuseException {
//		flags -= 32768;
		log.debug("release: " + path + " " + flags);
		if (path.equals(ROOTDIR)) {
			throw new FuseException("Read Only").initErrno(FuseException.EACCES);
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.release(newPath, fh, flags);
		}
	}

	public int truncate(String path, long size) throws FuseException {
		log.debug("truncate: " + path);
		if (path.equals(ROOTDIR)) {
			throw new FuseException("Read Only").initErrno(FuseException.EROFS);
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.truncate(newPath, size);
		}
	}

	public int unlink(String path) throws FuseException {
		log.debug("unlink: " + path);
		if (path.equals(ROOTDIR)) {
			throw new FuseException("Read Only").initErrno(FuseException.EROFS);
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.unlink(newPath);
		}
	}

	@Override
	public int readlink(String path, CharBuffer link) throws FuseException {
		log.debug("readlink: " + path);
		if (path.equals(ROOTDIR)) {
			return Errno.ENOLINK;
		} else {
			String entryName = getPathComponent(path, 0);
			Filesystem3 fs = fsMap.get(entryName);
			String newPath = removePathComponent(path, 0);
			return fs.readlink(newPath, link);
		}
	}
	
	@Override
	public int statfs(FuseStatfsSetter statfsSetter) throws FuseException {
			statfsSetter.set(BLOCK_SIZE, 100000, 20000, 18000, 0, 0, NAME_LENGTH);

			return 0;
	}
	public static void main(String[] args) {
		String fuseArgs[] = new String[args.length];
		System.arraycopy(args, 0, fuseArgs, 0, fuseArgs.length);
		log.info("mounting snmpfs");

		try {
			FuseMount.mount(fuseArgs, new SnmpFS(), log);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			log.info("exiting");
		}
	}

	
}
